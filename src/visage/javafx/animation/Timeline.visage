/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.animation;

/**
 * <p>A <code>Timeline</code> can be used to define a free form animation of any <code>WritableValue</code>, e.g. all JavaFX Properties.</p>
 * <p>A <code>Timeline</code>, defined by one or more <code>KeyFrame</code>s, processes individual <code>KeyFrame</code> sequentially, in the order specified by <code>KeyFrame.time</code>. The animated properties, defined as key values in <code>KeyFrame.values</code>, are interpolated to/from the targeted key values at the specified time of the <code>KeyFrame</code> to <code>Timeline</code>'s initial position, depends on <code>Timeline</code>'s direction.</p>
 * <p><code>Timeline</code> processes individual <code>KeyFrame</code> at or after specified time interval elapsed, it does not guarantee the timing when <code>KeyFrame</code> is processed.</p>
 * <p>If a <code>KeyFrame</code> is not provided for the <code>time==0s</code> instant, one will be synthesized using the target values that are current at the time <code>Animation.play()</code> or <code>Animation.playFromStart()</code> is called.</p>
 * <p>It is not possible to change the <code>keyFrames</code> of a running <code>Timeline</code>. If the value of <code>keyFrames</code> is changed for a running <code>Timeline</code>, it has to be stopped and started again to pick up the new value.</p>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class Timeline extends Animation {
    override var wrappedAnimation = javafx.animation.Timeline{};
    public-read def wrappedTimeline = bind wrappedAnimation as javafx.animation.Timeline;
    public default var keyFrames :KeyFrame[] on replace {
        if (isInitialized(this) or keyFrames != []) {
            wrappedTimeline.getKeyFrames().setAll(for (frame in keyFrames) frame.wrappedKeyFrame);
        }
    }
    /**
     * <p>Stops the animation and resets the play head to its initial position. If the animation is not currently running, this method has no effect.</p>
     * <p><dl><dt>Note:</dt><dd><code>stop()</code> is an asynchronous call, timeline may not stop immediately.</dd></dl></p>
     */
    override function stop() :Void {
        wrappedTimeline.stop()
    }
}

public def INDEFINITE = javafx.animation.Timeline.INDEFINITE;
