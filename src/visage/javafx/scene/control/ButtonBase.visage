/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;

import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;

/**
 * @author Stephen Chin <steveonjava@gmail.com>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class ButtonBase extends Labeled {
    public-read def wrappedButtonBase = bind wrappedNode as javafx.scene.control.ButtonBase;

    /** 
     * The button's action, which is invoked whenever the button is fired.
     * This may be due to the user clicking on the button with the mouse, or by a touch event, or by a key press,
     * or if the developer programmatically invokes the <code>fire()</code> method.
     */
    public var onAction :function(:ActionEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onAction == null) { 
                wrappedButtonBase.setOnAction(null) 
            } else if (wrappedButtonBase.getOnAction() == null) { 
                wrappedButtonBase.setOnAction(EventHandler { 
                    override function handle(event :Event) :Void { 
                        onAction(event as ActionEvent) 
                    }
                }) 
            } 
        // } 
    }
}
