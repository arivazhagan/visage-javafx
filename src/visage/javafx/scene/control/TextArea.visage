/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;

import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;

/** 
 * Several Controls accept and receive text input. Two such Controls are TextBox and PasswordBox. This class contains API which is common among all text entry Controls.
 * @author William Antônio <william.a.siqueira@gmail.com>
 */
public class TextArea extends TextInputControl {    
    override def wrappedNode = javafx.scene.control.TextArea{};
     public-read def wrappedTextArea = wrappedNode as javafx.scene.control.TextArea;


	 /**
	  * The default value for prefColumnCount.
	 **/     
     public-read def DEFAULT_PREF_COLUMN_COUNT:Integer = javafx.scene.control.TextArea.DEFAULT_PREF_COLUMN_COUNT;

	 /**
	  *  The default value for prefRowCount.
	 **/
	public-read def DEFAULT_PREF_ROW_COUNT:Integer = javafx.scene.control.TextArea.DEFAULT_PREF_ROW_COUNT;

    /**    
     * The number of pixels by which the content is horizontally scrolled.
     **/
    public var scrollLeft:Double on replace{
        if(isInitialized(this) or scrollLeft != 0.0){
            wrappedTextArea.setScrollLeft(scrollLeft);
        }
    }
    /**    
     * If a run of text exceeds the width of the TextArea, then this variable indicates whether the text should wrap onto another line 
     **/
    public var scrollTop:Double on replace{
        if(isInitialized(this) or scrollTop != 0.0){
            wrappedTextArea.setScrollTop(scrollTop);
        }
    }  	
	
    /**    
     * The number of pixels by which the content is vertically scrolled.
     **/
    public var wrapText:Boolean on replace{
        if(isInitialized(this) or wrapText){
            wrappedTextArea.setWrapText(wrapText);
        }
    }  		
	
    
    /**    
     * The preferred number of text columns.
     **/
    public var prefColumnCount:Integer = DEFAULT_PREF_COLUMN_COUNT on replace{
        if(isInitialized(this) or prefColumnCount != DEFAULT_PREF_COLUMN_COUNT){
            wrappedTextArea.setPrefColumnCount(prefColumnCount);
        }
    }
    /**    
     * The preferred number of text rows.
     **/
    public var prefRowCount:Integer = DEFAULT_PREF_COLUMN_COUNT on replace{
        if(isInitialized(this) or prefRowCount != DEFAULT_PREF_COLUMN_COUNT){
            wrappedTextArea.setPrefRowCount(prefRowCount);
        }
    }	    
}