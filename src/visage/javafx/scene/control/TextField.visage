/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;

import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;

/** 
 * Several Controls accept and receive text input. Two such Controls are TextBox and PasswordBox. This class contains API which is common among all text entry Controls.
 * @author William Ant√¥nio <william.a.siqueira@gmail.com>
 */
public class TextField extends TextInputControl {    
    override def wrappedNode = javafx.scene.control.TextField{};
     public-read def wrappedTextField = wrappedNode as javafx.scene.control.TextField;
     
     public-read def DEFAULT_PREF_COLUMN_COUNT:Integer = javafx.scene.control.TextField.DEFAULT_PREF_COLUMN_COUNT;

     /**
      * The action handler associated with this text field, or null if no action handler is assigned.
     **/
    public var onAction :function(:ActionEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onAction == null) { 
                wrappedTextField.setOnAction(null) 
            } else if (wrappedTextField.getOnAction() == null) { 
                wrappedTextField.setOnAction(EventHandler { 
                    override function handle(e:Event):Void { 
                        onAction(e as ActionEvent) 
                    }
                }) 
            } 
        // } 
    }
     
    
    /**    
     * The preferred number of text columns.
     **/
    public var prefColumnCount:Integer = DEFAULT_PREF_COLUMN_COUNT on replace{
        if(isInitialized(this) or prefColumnCount != DEFAULT_PREF_COLUMN_COUNT){
            wrappedTextField.setPrefColumnCount(prefColumnCount);
        }
    }
    
    /**    
     * The TextField's prompt text to display, or null if no prompt text is displayed.
     **/
    public var promptText:String on replace{
        if(isInitialized(this) or promptText != null){
            wrappedTextField.setPromptText(promptText);
        }
    }    
}