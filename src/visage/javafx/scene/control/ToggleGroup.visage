/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;
import javafx.scene.control.Toggle;
import javafx.collections.ListChangeListener;
/** 
 * <p>A class which contains a reference to all Toggles whose selected variables should be managed such that only a single Toggle within the ToggleGroup may be selected at any one time.</p>
 * <p>Generally ToggleGroups are managed automatically simply by specifying the name of a ToggleGroup on the Toggle, but in some situations it is desirable to explicitly manage which ToggleGroup is used by Toggles.</p>
 * @author William Antônio <william.a.siqueira@gmail.com>
 */
public class ToggleGroup{    
    public-read def wrappedToggleGroup = javafx.scene.control.ToggleGroup{};
    
    /*
    postinit{
        wrappedToggleGroup.getToggles().addListener(
            ListChangeListener{
                //need to make tests to determinate how to retrieve the new list
                override function onChanged(change:ListChangeListener.Change){
                
                }
            }
        );
    }
    */
    /**
     * The selected toggle.
    **/ 
    public-read def selectedToggle:Toggle = bind wrappedToggleGroup.getSelectedToggle();
    
    public function selectToggle(toggle:Toggle):Void{
        wrappedToggleGroup.selectToggle(toggle);
    }
    /*
    public-read var toggles:Toggle[] = [] on replace{
        if(isInitialized(this) and toggles != []){
            wrappedToggleGroup.getToggles().setAll({
                var listToggles = java.util.ArrayList{};
                for(t in toggles){
                    listToggles.add(t);                
                }
                listToggles;
            });
        }
    }
    */
    
}