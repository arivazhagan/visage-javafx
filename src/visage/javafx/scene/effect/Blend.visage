/*
 * Copyright (c) 2011-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution or use in source or binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions or the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions or the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS or CONTRIBUTORS "AS IS"
 * or ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED or ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.effect;



/** 
 * <p>An effect that blends the two inputs together using one of the pre-defined BlendModes.</p>
 * 
 * @author Rajmahendra Hegde <rajmahendra@gmail.com>
 */
public class Blend extends Effect {

    override def wrappedEffect = javafx.scene.effect.Blend {};
    public-read def wrappedBlend = bind wrappedEffect as javafx.scene.effect.Blend;

    
    /**
     * <p>The bottom input for this Blend operation. If set to null, or left unspecified, a graphical image of the Node to which the Effect is attached will be used as the input.</p>
     **/ 
    public var bottomInput:Effect on replace{
        if(isInitialized(this) or bottomInput != null){
            wrappedBlend.setBottomInput(bottomInput.wrappedEffect);
        }
    } 

    /**
     * <p>The top input for this Blend operation. If set to null, or left unspecified, a graphical image of the Node to which the Effect is attached will be used as the input.</p>
     **/ 
    public var topInput:Effect on replace{
        if(isInitialized(this) or topInput != null){
            wrappedBlend.setTopInput(topInput.wrappedEffect);
        }
    } 


    /**
     *<p>The opacity value, which is modulated with the top input prior to blending.</p>
     *<pre>
     *       Min: 0.0
     *       Max: 1.0
     *   Default: 1.0
     *  Identity: 1.0
     *</pre>
    **/
 public var opacity:Double = 1.0 on replace{
        if(isInitialized(this) or opacity != 1.0){
            wrappedBlend.setOpacity(opacity);
        }
    } 


     /**
     *<p>The BlendMode used to blend the two inputs together.</p>
     *<pre>
     *       Min: n/a
     *       Max: n/a
     *   Default: BlendMode.SRC_OVER
     *  Identity: n/a
     *</pre>
    **/ 
    public var mode:javafx.scene.effect.BlendMode = javafx.scene.effect.BlendMode.SRC_OVER on replace{
        if(isInitialized(this) or mode != javafx.scene.effect.BlendMode.SRC_OVER){
            wrappedBlend.setMode(mode);
        }
    } 


}
