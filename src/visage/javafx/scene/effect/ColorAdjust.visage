/*
 * Copyright (c) 2011-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution or use in source or binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions or the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions or the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS or CONTRIBUTORS "AS IS"
 * or ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED or ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.effect;

/** 
 * <p>An effect that allows for per-pixel adjustments of hue, saturation, brightness, and contrast.</p>
 * 
 * @author Rajmahendra Hegde <rajmahendra@gmail.com>
 */
public class ColorAdjust extends Effect {

    override def wrappedEffect = javafx.scene.effect.ColorAdjust {};
    public-read def wrappedColorAdjust = bind wrappedEffect as javafx.scene.effect.ColorAdjust;



    /**
     *<p>The brightness adjustment value.</p>
     *<pre>
     *       Min: -1.0
     *       Max: +1.0
     *   Default:  0.0
     *  Identity:  0.0
     *</pre>
    **/
 public var brightness:Double = 0.0 on replace{
        if(isInitialized(this) or brightness != 0.0){
            wrappedColorAdjust.setBrightness(brightness);
        }
    }  


/**
     *<p>The contrast adjustment value.</p>
     *<pre>
     *       Min: -1.0
     *       Max: +1.0
     *   Default:  0.0
     *  Identity:  0.0
     *</pre>
    **/
 public var contrast:Double = 0.0 on replace{
        if(isInitialized(this) or contrast != 0.0){
            wrappedColorAdjust.setContrast(contrast);
        }
    }  


    /**
     *<p>The hue adjustment value.</p>
     *<pre>
     *       Min: -1.0
     *       Max: +1.0
     *   Default:  0.0
     *  Identity:  0.0
     *</pre>
    **/
 public var hue:Double = 0.0 on replace{
        if(isInitialized(this) or hue != 0.0){
            wrappedColorAdjust.setHue(hue);
        }
    }  


    /**
     *<p>The saturation adjustment value.</p>
     *<pre>
     *       Min: -1.0
     *       Max: +1.0
     *   Default:  0.0
     *  Identity:  0.0
     *</pre>
    **/
 public var saturation:Double = 0.0 on replace{
        if(isInitialized(this) or saturation != 0.0){
            wrappedColorAdjust.setSaturation(saturation);
        }
    }  


/**
     * <p>The input for this Effect. If set to null, or left unspecified, a graphical image of the Node to which the Effect is attached will be used as the input.</p>
     **/ 
    public var input:Effect on replace{
        if(isInitialized(this) or input != null){
            wrappedColorAdjust.setInput(input.wrappedEffect);
        }
    } 

}