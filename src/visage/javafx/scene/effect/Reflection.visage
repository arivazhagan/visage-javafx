/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution or use in source or binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions or the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions or the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS or CONTRIBUTORS "AS IS"
 * or ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED or ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.effect;

/** 
 * <p>An effect that renders a reflected version of the input below the actual input content.</p>
 * <p>Note that the reflection of a Node with a Reflection effect installed will not respond to mouse events or the containment methods on the Node.</p>
 * @author William Antônio <william.a.siqueira@gmail.com>
 */
public class Reflection extends Effect {
    override def wrappedEffect = javafx.scene.effect.Reflection {};
    public-read def wrappedReflection = bind wrappedEffect as javafx.scene.effect.Reflection; 
   
    /**
     * The bottom opacity value, which is the opacity of the reflection at its bottom extreme.
    **/ 
    public var bottomOpacity:Double on replace{
        if(isInitialized(this) or bottomOpacity != 0.0){
            wrappedReflection.setBottomOpacity(bottomOpacity);
        }
    }
    
     /**
     * The fraction of the input that is visible in the reflection.
    **/ 
    public var fraction:Double = 0.75 on replace{
        if(isInitialized(this) or fraction != 0.75){
            wrappedReflection.setBottomOpacity(fraction);
        }
    }  

    /**
     * The input for this Effect.
    **/ 
    public var input:Effect on replace{
        if(isInitialized(this) or input != null){
            wrappedReflection.setInput(input.wrappedEffect);
        }
    }    
    
    /**
     * The top offset adjustment, which is the distance between the bottom of the input or the top of the reflection.
    **/ 
    public var topOffset:Double on replace{
        if(isInitialized(this) or topOffset != 0.0){
            wrappedReflection.setTopOffset(topOffset);
        }
    }  
    /**
     * The top opacity value, which is the opacity of the reflection at its top extreme.
    **/ 
    public var topOpacity:Double = 0.5 on replace{
        if(isInitialized(this) or topOpacity != 0.5){
            wrappedReflection.setTopOpacity(topOpacity);
        }
    }          
}