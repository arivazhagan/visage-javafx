/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution or use in source or binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions or the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions or the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS or CONTRIBUTORS "AS IS"
 * or ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED or ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.effect;

/*@author Arivazhagan Ambigapathi <arivu86@gmail.com>*/

public class Shadow extends Effect {
    override def wrappedEffect = javafx.scene.effect.Shadow {};
    public-read def wrappedShadow = bind wrappedEffect as javafx.scene.effect.Shadow;

    /**
         *<p>The vertical size of the shadow blur kernel. This attribute controls the vertical size of the total area over which the shadow of a single pixel is distributed by the blur algorithm.</p>
         *<pre>
         *       Min: 0.0
         *       Max: 255.0
         *   Default: 21.0
         *  Identity: <1.0
         *</pre>
        **/
    public var height :Double on replace{
            if(isInitialized(this) or height != 0.0){
                wrappedShadow.setHeight(height);
            }
    }

    /*<p>The radius of the shadow blur kernel. This attribute controls the distance that the shadow is spread to each side of the source pixels</p>
         *<pre>
         *       Min: 0.0
         *       Max: 127.0
         *   Default: 10.0
         *  Identity: 0.0
         *</pre>
        **/

    public var radius :Double on replace{
            if(isInitialized(this) or radius != 0.0){
                wrappedShadow.setRadius(radius);
            }
    }

    /*<p>The horizontal size of the shadow blur kernel. This attribute controls the horizontal size of the total area over which the shadow of a single pixel is distributed by the blur algorithm. </p>
         *<pre>
         *       Min: 0.0
         *       Max: 255.0
         *   Default: 21.0
         *  Identity: <1.0
         *</pre>
        **/
    public var width :Double on replace{
            if(isInitialized(this) or width != 0.0){
                wrappedShadow.setWidth(width);
            }
    }

    /*The input for this Effect. If set to null, or left unspecified, a graphical image of the Node 
    to which the Effect is attached will be used as the input.*/
    public var input:Effect on replace{
            if(isInitialized(this) or input != null){
                wrappedShadow.setInput(input.wrappedEffect);
            }
        }    
    /**
         *<p>The shadow Color. </p>
         *<pre>
         *       Min: n/a
         *       Max: n/a
         *   Default: Color.BLACK
         *  Identity: n/a
         *</pre>
        **/

    public var color :Color on replace{
            if(isInitialized(this) or color != null){
               wrappedShadow.setColor(visage.javafx.scene.paint.Paint.toJavaFX(color));
           }	
    }

    /**
         *<p>The algorithm used to blur the shadow.  </p>
         *<pre>
         *       Min: n/a
         *       Max: n/a
         *   Default: BlurType.THREE_PASS_BOX
         *  Identity: n/a
         *</pre>
        **/
     public var blurType : javafx.scene.effect.BlurType= javafx.scene.effect.BlurType.GAUSSIAN on replace {
             if(isInitialized(this) or color != null and blurType != javafx.scene.effect.BlurType.GAUSSIAN) {
                wrappedShadow.setBlurType(blurType);
             }
    }
}