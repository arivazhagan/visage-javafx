/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.image;

import visage.javafx.geometry.Rectangle2D;
import visage.javafx.scene.Node;

/**
 * <p>The <code>ImageView</code> is a <code>{@link Node}</code> used for painting images loaded with <code>{@link Image}</code> class.</p>
 * <p>This class allows resizing the displayed image (with or without preserving the original aspect ratio) and specifying a viewport into the source image for restricting the pixels displayed by this <code>ImageView</code>.</p>
 * <p>Example code for displaying images:</p>
 * <pre> 
 * import visage.javafx.geometry.Rectangle2D;
 * import visage.javafx.scene.image.Image;
 * import visage.javafx.scene.image.ImageView;
 * import visage.javafx.scene.layout.HBox;
 * import visage.javafx.scene.Scene;
 * import visage.javafx.stage.Stage;
 *
 * Stage {
 *     title: "ImageView example"
 *     width: 415
 *     height: 200
 *     Scene {
 *         fill: Color.BLACK
 *
 * // load the image
 * def image = Image { url: "Turdus-rufiventris.jpg" }
 *
 * // simple ImageView displays the image as is
 * def iv1 = ImageView { image }
 *
 * // resizes the image to have width of 100 while preserving the ratio and using
 * // higher quality filtering method; this ImageView is also cached to
 * // improve performance
 * def iv2 = ImageView { image, fitWidth: 100, preserveRatio: true, smooth: true, cache: true }
 *
 * // defines a viewport into the source image (achieving a "zoom" effect) and
 * // displays it rotated
 * def iv3 = ImageView { image, viewport: Rectangle2D {minX: 40, minY: 35, width: 110, height: 110}, rotate: 90 }
 *
 *         HBox {
 *             [ iv1, iv2, iv3 ]
 *         }
 *     }
 * }
 * </pre>
 * The code above produces the following: <img src="http://download.oracle.com/javafx/2.0/api/javafx/scene/image/doc-files/imageview.png" />
 * @author Alain BÃ©arez <A@cua.li>
 */ // TODO produce an image with the bird instead of the flower, once the HBox class and the rotate method in Node get ready
public class ImageView extends Node {
    override def wrappedNode = javafx.scene.image.ImageView {}
    public-read def wrappedImageView = bind wrappedNode as javafx.scene.image.ImageView;

    /**
     * The <code>Image</code> to be painted by this <code>ImageView</code>.
     */
    public default var image :Image on replace oldValue {
        if ((isInitialized(this) and (oldValue != image)) or (null != image)) {
            wrappedImageView.setImage(image.wrappedImage)
        }
    }
    /**
     * The current x coordinate of the <code>ImageView</code> origin.
     */
    public var x :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != x)) or (0 != x)) {
            wrappedImageView.setX(x)
        }
    }
    /**
     * The current y coordinate of the <code>ImageView</code> origin.
     */
    public var y :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != y)) or (0 != y)) {
            wrappedImageView.setY(y)
        }
    }
    /**
     * <p>The width of the bounding box within which the source image is resized as necessary to fit. If set to a value <= 0, then the intrinsic width of the image will be used as the <code>fitWidth</code>.</p>
     * <p>See <code>preserveRatio</code> for information on interaction between image view's <code>fitWidth</code>, <code>fitHeight</code> and <code>preserveRatio</code> attributes.</p>
     */
    public var fitWidth :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != fitWidth)) or (0 != fitWidth)) {
            wrappedImageView.setFitWidth(fitWidth)
        }
    }
    /**
     * <p>The height of the bounding box within which the source image is resized as necessary to fit. If set to a value <= 0, then the intrinsic height of the image will be used as the <code>fitHeight</code>.</p>
     * <p>See <code>preserveRatio</code> for information on interaction between image view's <code>fitWidth</code>, <code>fitHeight</code> and <code>preserveRatio</code> attributes.</p>
     */
    public var fitHeight :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != fitHeight)) or (0 != fitHeight)) {
            wrappedImageView.setFitHeight(fitHeight)
        }
    }
    /**
     * <p>Indicates whether to preserve the aspect ratio of the source image when scaling to fit the image within the fitting bounding box.</p>
     * <p>If set to <code>true</code>, it affects the dimensions of this <code>ImageView</code> in the following way:</p>
     * <ul>
     * <li>If only <code>fitWidth</code> is set, height is scaled to preserve ratio
     * <li>If only <code>fitHeight</code> is set, width is scaled to preserve ratio
     * <li>If both are set, they both may be scaled to get the best fit in a width by height rectangle while preserving the original aspect ratio</li>
     * </ul>
     * <p>If unset or set to <code>false</code>, it affects the dimensions of this <code>ImageView</code> in the following way:</p>
     * <ul>
     * <li>If only <code>fitWidth</code> is set, image's view width is scaled to match and height is unchanged;</li>
     * <li>If only <code>fitHeight</code> is set, image's view height is scaled to match and height is unchanged;</li>
     * <li>If both are set, the image view is scaled to match both.</li>
     * </ul>
     * <p>Note that the dimensions of this node as reported by the node's bounds will be equal to the size of the scaled image and is guaranteed to be contained within <code>fitWidth x fitHeight</code> bounding box.</p>
     */
    public var preserveRatio :Boolean on replace oldValue {
        if ((isInitialized(this) and (oldValue != preserveRatio)) or preserveRatio) {
            wrappedImageView.setPreserveRatio(preserveRatio)
        }
    }
    /**
     * <p>Indicates whether to use a better quality filtering algorithm or a faster one when transforming or scaling the source image to fit within the bounding box provided by <code>fitWidth</code> and <code>fitHeight</code>.</p>
     * <p>If set to <code>true</code> a better quality filtering will be used, if set to <code>false</code> a faster but lesser quality filtering will be used.</p>
     * <p>The default value depends on platform configuration.</p>
     */
    public var smooth :Boolean on replace oldValue {
        if ((isInitialized(this) and (oldValue != smooth)) or smooth) {
            wrappedImageView.setSmooth(smooth)
        }
    }
    /**
     * <p>The rectangular viewport into the image. The viewport is specified in the coordinates of the image, prior to scaling or any other transformations.</p>
     * <p>If <code>viewport</code> is <code>null</code>, the entire image is displayed. If <code>viewport</code> is non-<code>null</code>, only the portion of the image which falls within the viewport will be displayed. If the image does not fully cover the viewport then any remaining area of the viewport will be empty.
     */
    public var viewport :Rectangle2D on replace oldValue {
        if ((isInitialized(this) and (oldValue != viewport)) or (null != viewport)) {
            wrappedImageView.setViewport(viewport.wrappedRectangle2D)
        }
    }
    //FIXME instantiate all the properties' listeners
}
