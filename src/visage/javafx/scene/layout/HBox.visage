/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.layout;

import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.scene.layout.Priority;

import visage.javafx.scene.Node;
import visage.javafx.geometry.Insets;

/**
 * <p>HBox lays out its children in a single horizontal row.</p>
 * <p>HBox example:</p>
 * <pre>
 *    hbox = HBox { 8 // spacing = 8
 *        alignment: VPos.BASELINE
 *        children: [ Label { "Name:" }, TextBox {} ]
 *    }
 * </pre>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class HBox extends Pane {
    override def wrappedNode = javafx.scene.layout.HBox{}
    public-read var wrappedHBox = bind wrappedNode as javafx.scene.layout.HBox;

    /**
     * The amount of horizontal space between each child in the <code>HBox</code>.
     */
    public default var spacing :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != spacing)) or (0 != spacing)) {
            wrappedHBox.setSpacing(spacing)
        }
    }
    /**
     * The overall alignment of children within the <code>HBox</code>'s width and height. If the vertical alignment value is <code>BASELINE</code>, then children will always be resized to their preferred heights and the <code>fillHeight</code> property will be ignored.
     */
    public var alignment :Pos on replace oldValue {
        if ((isInitialized(this) and (oldValue != alignment)) or (null != alignment)) {
            wrappedHBox.setAlignment(alignment)
        }
    }
    /**
     * Whether or not resizable children will be resized to fill the full height of the <code>HBox</code> or be kept to their preferred height and aligned according to the alignment <code>VPos</code> value. Note that if the <code>HBox</code> vertical alignment is set to <code>BASELINE</code>, then this property will be ignored and children will be resized to their preferred heights.
     */
   public var fillHeight :Boolean on replace oldValue {
        if ((isInitialized(this) and (oldValue != fillHeight)) or fillHeight) {
            wrappedHBox.setFillHeight(fillHeight)
        }
    }
    /**
     * {@inheritsDoc}
     * @return <code>null</code> unless <code>fillHeight</code> is <code>true</code> and one of its children has a <code>VERTICAL</code> content bias, in which case it returns <code>VERTICAL</code>.
     */
    override function getContentBias() :Orientation {
        wrappedHBox.getContentBias()
    }
    // FIXME instantiate all the properties' listeners
}

/**
 * Sets the horizontal grow priority for the child when contained by an <code>HBox</code>. If set, the <code>HBox</code> will use the priority to allocate additional space if the <code>HBox</code> is resized larger than it's preferred width. If multiple <code>HBox</code> children have the same horizontal grow priority, then the extra space will be split evening between them. If no horizontal grow priority is set on a child, the <code>HBox</code> will never allocate it additional horizontal space if available. Setting the value to <code>null</code> will remove the constraint.
 * @param child the child node of an <code>HBox</code>.
 * @param value the horizontal grow priority for the child.
 */
public function setHGrow(child :Node, value :Priority) :Void {
    javafx.scene.layout.HBox.setHgrow(child.wrappedNode, value)
}
/**
 * @param child the child node of an <code>HBox</code>.
 * @return the horizontal grow priority for the child or <code>null</code> if no priority was set.
 */
public function getHGrow(child :Node) :Priority {
    javafx.scene.layout.HBox.getHgrow(child.wrappedNode)
}
/**
 * Sets the margin for the child when contained by an <code>HBox</code>. If set, the <code>HBox</code> will layout the child with the margin space around it. Setting the value to <code>null</code> will remove the constraint.
 * @param child the child node of an <code>HBox</code>.
 * @param value the margin of space around the child.
 */
public function setMargin(child :Node, value :Insets) :Void {
    javafx.scene.layout.HBox.setMargin(child.wrappedNode, value.wrappedInsets)
}
/**
 * @param child the child node of an <code>HBox</code>.
 * @return the margin for the child or <code>null</code> if no margin was set.
 */
public function getMargin(child :Node) :Insets {
    Insets { wrappedInsets: javafx.scene.layout.HBox.getMargin(child.wrappedNode) }
}
/**
 * Removes all <code>HBox</code> constraints from the child node.
 * @param child the child node of an <code>HBox</code>.
 */
public function clearConstraints(child :Node) {
    javafx.scene.layout.HBox.clearConstraints(child.wrappedNode)

}
