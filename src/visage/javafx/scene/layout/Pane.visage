/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.layout;

import visage.javafx.scene.Node;

/**
 * <p>Base class for layout panes which need to expose the children list as public so that users of the subclass can freely add/remove children.</p>
 * <p>This class may be used directly in cases where absolute positioning of children is required since it does not perform layout beyond resizing resizable children to their preferred sizes; childrens' positions are not modified by the pane.</p>
 * <p>Note: if an application needs children to be centered within a parent, it should use a <code>StackPane</code> instead.</p>
 * <p><strong>Resizable Range</strong></p>
 * <p>The pane's preferred width/height will be computed as the size required to encompass each managed child at its current location and preferred size, measured from the pane's origin (in other words, the largest layoutBounds maxX and maxY values). It's max width/height are unbounded (<code>Double.MAX_VALUE</code>).</p>
 * <p>Pane does not clip its content by default, so it is possible that childrens' bounds may extend outside its own bounds, either if children are positioned at negative coordinates or the pane is resized smaller than its preferred size.</p>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class Pane extends Region {
    public-read def wrappedPane = bind wrappedNode as javafx.scene.layout.Pane;
    public default var children:Node[] on replace {
        if (isInitialized(this) or children != []) {
            wrappedPane.getChildren().setAll(for (child in children) child.wrappedNode);
        }
    }
    /** Gets the list of all managed children of this <code>Parent</code>. */
    protected function getManagedChildren() :Node[] {
        [ for (child in children) { if (child.managed) child else null } ]
    }
}
