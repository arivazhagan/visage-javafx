/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.layout;

import javafx.geometry.Orientation;
import javafx.geometry.Pos;

import visage.javafx.scene.Node;
import visage.javafx.geometry.Insets;

/**
 * <p><code>StackPane</code> lays out its children in a back-to-front stack.</p>
 * <p>The z-order of the children is defined by the order of the children <code>observableArrayList</code> with the 0th child being the bottom and last child on top. <code>StackPane</code> supports optional {@link Region.padding<code>} and the alignment of children is controlled by <code>alignment</code>, both of which default to <code>CENTER</code>.</p>
 * <p>The stackpane will attempt to resize each child to fill its content area. If the child could not be sized to fill the stackpane (either because it was not resizable or its size limits prevented it) then it will be aligned within the area using <code>alignment</code>.</p>
 * <p>Simple StackPane example:</p>
 * <pre>
 *     stack = StackPane { 
 *         padding: Insets { top: 10, bottom: 10, left: 10, right: 10 }
 *         children: [ Rectangle { width: 100, height: 100, fill: Color.BLUE}, Label { "Go! } ]
 *     }
 * </pre>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class StackPane extends Pane {
    override def wrappedNode = javafx.scene.layout.StackPane{}
    public-read var wrappedStackPane = bind wrappedNode as javafx.scene.layout.StackPane;

    /**
     * The overall alignment of children within the <code>StackPane</code>'s width and height.
     */
    public var alignment :Pos on replace oldValue {
        if ((isInitialized(this) and (oldValue != alignment)) or (null != alignment)) {
            wrappedStackPane.setAlignment(alignment)
        }
    }
    /**
     * {@inheritsDoc}
     * @return the first non-null <code>contentBias</code> of its managed children or <code>null</code> if no managed children have a content bias.
     */
    override function getContentBias() :Orientation {
        wrappedStackPane.getContentBias()
    }
    // FIXME instantiate all the properties' listeners
}
/**
 * Sets the alignment for the child when contained by a <code>StackPane</code>.  If set, will override the <code>StackPane</code>'s default alignment. Setting the value to <code>null</code> will remove the constraint.
 * @param child the child node of a <code>StackPane</code>.
 * @param value the alignment position for the child.
 */
public function setAlignment(child :Node, value :Pos) :Void {
    javafx.scene.layout.StackPane.setAlignment(child.wrappedNode, value)
}
/**
 * @param child the child node of a <code>StackPane</code>.
 * @return the alignment position for the child or <code>null</code> if no alignment was set.
 */
public function getAlignment(child :Node) :Pos {
    javafx.scene.layout.StackPane.getAlignment(child.wrappedNode)
}
/**
 * Sets the margin for the child when contained by a <code>StackPane</code>. If set, the <code>StackPane</code> will layout the child with the margin space around it. Setting the value to <code>null</code> will remove the constraint.
 * @param child the child node of a <code>StackPane</code>.
 * @param value the margin of space around the child.
 */
public function setMargin(child :Node, value :Insets) :Void {
    javafx.scene.layout.StackPane.setMargin(child.wrappedNode, value.wrappedInsets)
}
/**
 * @param child the child node of a <code>StackPane</code>.
 * @return the margin for the child or <code>null</code> if no margin was set.
 */
public function getMargin(child :Node) :Insets {
    Insets { wrappedInsets: javafx.scene.layout.StackPane.getMargin(child.wrappedNode) }
}
/**
 * Removes all <code>StackPane</code> constraints from the child node.
 * @param child the child node of a <code>StackPane</code>.
 */
public function clearConstraints(child :Node) {
    javafx.scene.layout.StackPane.clearConstraints(child.wrappedNode)
}
