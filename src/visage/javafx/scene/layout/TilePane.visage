/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.layout;

import javafx.geometry.Orientation;
import javafx.geometry.Pos;

import visage.javafx.scene.Node;
import visage.javafx.geometry.Insets;

/**
 * <p><code>TilePane</code> lays out its children in a grid of uniformly sized "tiles".</p>
 * <p>A horizontal <code>TilePane</code> (the default) will tile nodes in rows, wrapping at the <code>TilePane</code>'s width. A vertical <code>TilePane</code> will tile nodes in columns, wrapping at the <code>TilePane</code>'s height.</p>
 * <p>The size of each "tile" defaults to the size needed to encompass the largest preferred width and height of the <code>TilePane</code>'s children and the <code>TilePane</code> will recompute the size of the tiles as needed to accommodate the largest preferred size of its children as it changes. The application may also control the size of the tiles directly by setting <code>prefTileWidth</code>/<code>prefTileHeight</code> properties to a value other than <code>USE_COMPUTED_SIZE</code> (the default).</p>
 * <p>Applications should initialize either <code>prefColumns</code> (for horizontal) or <code>prefRows</code> (for vertical) to establish the <code>TilePane</code>'s preferred size (the arbitrary default is <code>5</code>).</p>
 * <p>The <code>TilePane</code> will position nodes within each tile using <code>tileAlignment</code> which defaults to <code>CENTER</code>.</p>
 * <p>A horizontal <code>TilePane</code> example:</p>
 * <pre>
 *     tile = TilePane { 
 *         prefColumns: 4
 *         hgap: 8 vgap: 8
 *         children: [ for (i in [1..20]) ImageView { Image { url: "image{i}.png" } } ]
 *     }
 * </pre>
 * <p>A vertical <code>TilePane</code> example:</p>
 * <pre>
 *     tile = TilePane { 
 *         Orientation.VERTICAL
 *         tileAlignment: Pos.CENTER_LEFT
 *         prefRows: 10
 *         children: [ for (i in [1..50]) ImageView { Image { url: "image{i}.png" } } ]
 *     }
 * </pre>
 * <p>The <code>TilePane</code> will attempt to resize each child to fill its tile. If the child could not be sized to fill the tile (either because it was not resizable or its size limits prevented it) then it will be aligned within the tile using <code>tileAlignment</code>.</p>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class TilePane extends Pane {
    public-read var wrappedTilePane = bind wrappedNode as javafx.scene.layout.TilePane;

    /**
     * The actual width of each tile. This property is read-only.
     */
    public-read var tileWidth :Double;
    /**
     * The actual hieght of each tile. This property is read-only.
     */
    public-read var tileHeight :Double;
    /**
     * <p>The overall alignment of the <code>TilePane</code>'s content within its width and height.</p>
     * <p>For a horizontal <code>TilePane</code>, each row will be aligned within the <code>TilePane</code>'s width using the alignment's <code>hpos</code> value, and the rows will be aligned within the <code>TilePane</code>'s height using the alignment's <code>vpos</code> value.</p>
     * <p>For a vertical <code>TilePane</code>, each column will be aligned within the <code>TilePane</code>'s height using the alignment's <code>vpos</code> value, and the columns will be aligned within the <code>TilePane</code>'s width using the alignment's <code>hpos</code> value.</p>
     */
    public var alignment :Pos on replace oldValue {
        if ((isInitialized(this) and (oldValue != alignment)) or (null != alignment)) {
            wrappedTilePane.setAlignment(alignment)
        }
    }
    /**
     * The default alignment of each child within its tile. This may be overridden on individual children by setting the child's alignment constraint.
     */
    public var tileAlignment :Pos on replace oldValue {
        if ((isInitialized(this) and (oldValue != tileAlignment)) or (null != tileAlignment)) {
            wrappedTilePane.setTileAlignment(tileAlignment)
        }
    }
    /**
     * The orientation of this <code>TilePane</code>. A horizontal <code>TilePane</code> lays out children in tiles, left to right, wrapping tiles at the <code>TilePane</code>'s width boundary. A vertical <code>TilePane</code> lays out children in tiles, top to bottom, wrapping at the <code>TilePane</code>'s height. The default is horizontal.
     */
    public var orientation :Orientation on replace oldValue {
        if ((isInitialized(this) and (oldValue != orientation)) or (null != orientation)) {
            wrappedTilePane.setOrientation(orientation)
        }
    }
    /**
     * <p>The preferred number of rows for a vertical <code>TilePane</code>. This value is used only to compute the preferred size of the <code>TilePane</code> and may not reflect the actual number of rows, which may change if the <code>TilePane</code> is resized to something other than its preferred height. This property is ignored for a horizontal <code>TilePane</code>.</p>
     * <p>It is recommended that the application initialize this value for a vertical <code>TilePane</code>.</p>
     */
    public var prefRows :Integer on replace oldValue {
        if ((isInitialized(this) and (oldValue != prefRows)) or (0 != prefRows)) {
            wrappedTilePane.setPrefRows(prefRows)
        }
    }
    /**
     * <p>The preferred number of columns for a horizontal <code>TilePane</code>. This value is used only to compute the preferred size of the <code>TilePane</code> and may not reflect the actual number of columns, which may change if the <code>TilePane</code> is resized to something other than its preferred width. This property is ignored for a vertical <code>TilePane</code>.</p>
     * <p>It is recommended that the application initialize this value for a horizontal <code>TilePane</code>.</p>
     */
    public var prefColumns :Integer on replace oldValue {
        if ((isInitialized(this) and (oldValue != prefColumns)) or (0 != prefColumns)) {
            wrappedTilePane.setPrefColumns(prefColumns)
        }
    }
    /**
     * The preferred width of each tile. If equal to <code>USE_COMPUTED_SIZE</code> (the default) the tile width wlll be automatically recomputed by the <code>TilePane</code> when the preferred size of children changes to accommodate the widest child. If the application sets this property to value greater than <code>0</code>, then tiles will be set to that width and the <code>TilePane</code> will attempt to resize children to fit within that width (if they are resizable and their min-max width range allows it).
     */
    public var prefTileWidth :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != prefTileWidth)) or (0 != prefTileWidth)) {
            wrappedTilePane.setPrefTileWidth(prefTileWidth)
        }
    }
    /**
     * The preferred height of each tile. If equal to <code>USE_COMPUTED_SIZE</code> (the default) the tile height wlll be automatically recomputed by the <code>TilePane</code> when the preferred size of children changes to accommodate the tallest child. If the application sets this property to value greater than <code>0</code>, then tiles will be set to that height and the <code>TilePane</code> will attempt to resize children to fit within that height (if they are resizable and their min-max height range allows it).
     */
    public var prefTileHeight :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != prefTileHeight)) or (0 != prefTileHeight)) {
            wrappedTilePane.setPrefTileHeight(prefTileHeight)
        }
    }
    /**
     * The amount of horizontal space between each tile in a row.
     */
    public var hgap :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != hgap)) or (0 != hgap)) {
            wrappedTilePane.setHgap(hgap)
        }
    }
    /**
     * The amount of vertical space between each tile in a column.
     */
    public var vgap :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != vgap)) or (0 != vgap)) {
            wrappedTilePane.setVgap(vgap)
        }
    }
    /**
     * {@inheritsDoc}
     */
    override function requestLayout() :Void {
        wrappedTilePane.requestLayout()
    }
    /**
     * {@inheritsDoc}
     * @return orientation of width/height dependency or <code>null</code> if there is none.
     */
    override function getContentBias() :Orientation {
        wrappedTilePane.getContentBias()
    }
    init {
        wrappedNode = new javafx.scene.layout.TilePane(orientation, hgap, vgap)
    }
    // FIXME instantiate all the properties' listeners
}
/**
 * Sets the alignment for the child when contained by a <code>TilePane</code>.  If set, will override the <code>TilePane</code>'s default alignment. Setting the value to <code>null</code> will remove the constraint.
 * @param child the child node of a <code>TilePane</code>.
 * @param value the alignment position for the child.
 */
public function setAlignment(child :Node, value :Pos) :Void {
    javafx.scene.layout.TilePane.setAlignment(child.wrappedNode, value)
}
/**
 * @param child the child node of a <code>TilePane</code>.
 * @return the alignment position for the child or <code>null</code> if no alignment was set.
 */
public function getAlignment(child :Node) :Pos {
    javafx.scene.layout.TilePane.getAlignment(child.wrappedNode)
}
/**
 * Sets the margin for the child when contained by a <code>TilePane</code>. If set, the <code>TilePane</code> will layout the child with the margin space around it. Setting the value to <code>null</code> will remove the constraint.
 * @param child the child node of a <code>TilePane</code>.
 * @param value the margin of space around the child.
 */
public function setMargin(child :Node, value :Insets) :Void {
    javafx.scene.layout.TilePane.setMargin(child.wrappedNode, value.wrappedInsets)
}
/**
 * @param child the child node of a <code>TilePane</code>.
 * @return the margin for the child or <code>null</code> if no margin was set.
 */
public function getMargin(child :Node) :Insets {
    Insets { wrappedInsets: javafx.scene.layout.TilePane.getMargin(child.wrappedNode) }
}
/**
 * Removes all <code>TilePane</code> constraints from the child node.
 * @param child the child node of a <code>TilePane</code>.
 */
public function clearConstraints(child :Node) {
    javafx.scene.layout.TilePane.clearConstraints(child.wrappedNode)
}
