/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.shape;

/**
 * <p>A path element that forms an arc from the previous coordinates to the specified x and y coordinates using the specified radius.</p>
 * <p>For more information on path elements see the <code>Path</code> and <code>PathElement</code> classes.</p>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class ArcTo extends PathElement {
    override var wrappedPathElement = javafx.scene.shape.ArcTo {}
    public-read def wrappedArcTo = bind wrappedPathElement as javafx.scene.shape.ArcTo;

    /**
     * The horizontal radius to use for the arc.
     */
    public var radiusX :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != radiusX)) or (0 != radiusX)) {
            wrappedArcTo.setRadiusX(radiusX);
        }
    }
    /**
     * The vertical radius to use for the arc.
     */
    public var radiusY :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != radiusY)) or (0 != radiusY)) {
            wrappedArcTo.setRadiusY(radiusY);
        }
    }
    /**
     * The x-axis rotation in degrees.
     */
    public var xAxisRotation :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != xAxisRotation)) or (0 != xAxisRotation)) {
            wrappedArcTo.setXAxisRotation(xAxisRotation);
        }
    }
    /**
     * The large arc flag.
     */
    public var largeArcFlag :Boolean on replace oldValue {
        if ((isInitialized(this) and (oldValue != largeArcFlag)) or (largeArcFlag)) {
            wrappedArcTo.setLargeArcFlag(largeArcFlag);
        }
    }
    /**
     * The sweep flag.
     */
    public var sweepFlag :Boolean on replace oldValue {
        if ((isInitialized(this) and (oldValue != sweepFlag)) or (sweepFlag)) {
            wrappedArcTo.setSweepFlag(sweepFlag);
        }
    }
    /**
     * The x coordinate to arc to.
     */
    public var x :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != x)) or (0 != x)) {
            wrappedArcTo.setX(x);
        }
    }
    /**
     * The y coordinate to arc to.
     */
    public var y :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != y)) or (0 != y)) {
            wrappedArcTo.setY(y);
        }
    }
}
