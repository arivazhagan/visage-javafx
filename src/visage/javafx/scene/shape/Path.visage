/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.shape;

import javafx.scene.shape.FillRule;

/**
 * The <code>Path</code> class represents a simple shape and provides facilities required for basic construction and management of a geometric path.
 * @author Alain BÃ©arez <A@cua.li>
 */
public class Path extends Shape {
    override def wrappedNode = javafx.scene.shape.Path {}
    public-read def wrappedPath = bind wrappedNode as javafx.scene.shape.Path;
    
    /**
     * Defines the list of path elements of this path.
     */
    public default var elements: PathElement[] on replace {
        if (isInitialized(this) or elements != []) {
            wrappedPath.getElements().setAll(for (child in elements) child.wrappedPathElement);
        }
    }
    /**
     * Defines the filling rule constant for determining the interior of the path. The value must be one of the following constants: <code>FillRile.EVEN_ODD</code> or <code>FillRule.NON_ZERO</code>. The default value is <code>FillRule.NON_ZERO</code>.
     */
    public var fillRule :FillRule on replace oldValue {
        if ((isInitialized(this) and (oldValue != fillRule)) or (FillRule.NON_ZERO != fillRule)){
            wrappedPath.setFillRule(fillRule);
        }
    }
}