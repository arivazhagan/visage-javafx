/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.shape;

/**
 * <p>The <code>PathElement</code> class represents an abstract element of the Path that can represent any geometric objects like straight lines, arcs, quadratic curves, cubic curves, etc.</p>
 * @author Alain BÃ©arez <A@cua.li>
 */
public abstract class PathElement {
    public-read protected var wrappedPathElement :javafx.scene.shape.PathElement;

    /**
     * A flag that indicates whether the path coordinates are absolute or relative. 
     * A value of <code>true</code> indicates that the coordinates are absolute values. 
     * A value of <code>false</code> indicates that the values in this <code>PathElement</code> are added to the coordinates of the previous <code>PathElement</code> to compute the actual coordinates.
     */
    public var absolute :Boolean on replace oldValue {
        if ((isInitialized(this) and (oldValue != absolute)) or (absolute)) {
            wrappedPathElement.setAbsolute(absolute);
        }
    }
}
