/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.transform;

import visage.javafx.geometry.Point3D;

/** 
 * <p>This class represents an <code>Affine</code> object that rotates coordinates around an anchor point. This operation is equivalent to translating the coordinates so that the anchor point is at the origin (S1), then rotating them about the new origin (S2), and finally translating so that the intermediate origin is restored to the coordinates of the original anchor point (S3).</p>
 * <p>For example, the matrix representing the returned transform of new <code>Rotate (theta, x, y, z)</code> around the Z-axis is:</p>
 * <pre>
 *             [   cos(theta)    -sin(theta)   0    x-x*cos(theta)+y*sin(theta)  ]
 *             [   sin(theta)     cos(theta)   0    y-x*sin(theta)-y*cos(theta)  ]
 *             [       0              0        1                  z              ]
 * </pre>
 *
 * @author Alain BÃ©arez <A@cua.li>
 */
public class Rotate extends Transform {
    override var wrappedTransform = javafx.scene.transform.Rotate {};
    def wrappedRotate = bind wrappedTransform as javafx.scene.transform.Rotate;

    /** Defines the angle of rotation measured in degrees. */
    public var angle :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != angle)) or (0 != angle)) {
            wrappedRotate.setAngle(angle);
        }
    }
    /** Defines the X coordinate of the rotation pivot point. */
    public var pivotX :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotX)) or (0 != pivotX)) {
            wrappedRotate.setPivotX(pivotX);
        }
    }
    /** Defines the Y coordinate of the rotation pivot point. */
    public var pivotY :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotY)) or (0 != pivotY)) {
            wrappedRotate.setPivotY(pivotY);
        }
    }
    /** Defines the Z coordinate of the rotation pivot point. */
    public var pivotZ :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotZ)) or (0 != pivotZ)) {
            wrappedRotate.setPivotZ(pivotZ);
        }
    }
    /** Defines the axis of rotation at the pivot point. */
    public var axis :Point3D on replace oldValue {
        if ((isInitialized(this) and (oldValue != axis)) or (null != axis)) {
            wrappedRotate.setAxis(axis.wrappedPoint3D);
        }
    }
    /**
     * <p>Returns a string representation of this <code>Rotate</code>. This method is intended to be used only for informational purposes. 
     * The content and format of the returned string might vary between implementations. The returned string might be empty but cannot be <code>null</code>.</p>
     */
    override function toString() :String {
        wrappedRotate.toString()
    }
}

public def X_AXIS = Point3D.fromJavaFX(javafx.scene.transform.Rotate.X_AXIS);
public def Y_AXIS = Point3D.fromJavaFX(javafx.scene.transform.Rotate.Y_AXIS);
public def Z_AXIS = Point3D.fromJavaFX(javafx.scene.transform.Rotate.Z_AXIS);
