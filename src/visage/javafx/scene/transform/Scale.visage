/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.transform;

import visage.javafx.geometry.Point3D;

/** 
 * <p>This class represents an <code>Affine</code> object that scales coordinates by the specified factors. The matrix representing the scaling transformation is as follows::</p>
 * <pre>
 *             [ x    0   0   0 ]
 *             [ 0    y   0   0 ]
 *             [ 0    0   z   0 ]
 *
 * @author Alain BÃ©arez <A@cua.li>
 */
public class Scale extends Transform {
    override var wrappedTransform = javafx.scene.transform.Scale {};
    def wrappedScale = bind wrappedTransform as javafx.scene.transform.Scale;

    /** Defines the factor by which coordinates are scaled along the X axis direction. The default value is <code>1.0</code>. */
    public var x :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != x)) or (0 != x)) {
            wrappedScale.setX(x);
        }
    }
    /** Defines the factor by which coordinates are scaled along the Y axis direction. The default value is <code>1.0</code>. */
    public var y :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != y)) or (0 != y)) {
            wrappedScale.setY(y);
        }
    }
    /** Defines the factor by which coordinates are scaled along the Z axis direction. The default value is <code>1.0</code>. */
    public var z :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != z)) or (0 != z)) {
            wrappedScale.setZ(z);
        }
    }
    /** Defines the X coordinate of the rotation pivot point. */
    public var pivotX :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotX)) or (0 != pivotX)) {
            wrappedScale.setPivotX(pivotX);
        }
    }
    /** Defines the Y coordinate of the rotation pivot point. */
    public var pivotY :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotY)) or (0 != pivotY)) {
            wrappedScale.setPivotY(pivotY);
        }
    }
    /** Defines the Z coordinate of the rotation pivot point. */
    public var pivotZ :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotZ)) or (0 != pivotZ)) {
            wrappedScale.setPivotZ(pivotZ);
        }
    }
    /**
     * <p>Returns a string representation of this <code>Scale</code>. This method is intended to be used only for informational purposes. 
     * The content and format of the returned string might vary between implementations. The returned string might be empty but cannot be <code>null</code>.</p>
     */
    override function toString() :String {
        wrappedScale.toString()
    }
}
