/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/** 
 * <p>This class represents an Affine object that shears coordinates by the specified multipliers. The matrix representing the shearing transformation is as follows: </p>
 * <pre>
 *             [   1   x   0   -x*pivotY ]
 *             [   y   1   0   -y*pivotX ]
 *             [   0   0   1   0   ]
 * </pre>
 *
 * @author Arivazhagan Ambigapathi <arivu86@gmail.com>
 */

package visage.javafx.scene.transform;

public class Shear extends Transform{
    override var wrappedTransform = javafx.scene.transform.Shear {};
    def wrappedShear = bind wrappedTransform as javafx.scene.transform.Shear;

    /** Defines the X coordinate of the rotation pivot point. */
    public var pivotX :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotX)) or (0 != pivotX)) {
            wrappedShear.setPivotX(pivotX);
        }
    }

    /** Defines the Y coordinate of the rotation pivot point. */
    public var pivotY :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != pivotY)) or (0 != pivotY)) {
            wrappedShear.setPivotY(pivotY);
        }
    }

/**
     *<p>Defines the multiplier by which coordinates are shifted in the direction of the positive X axis as a factor of their Y coordinate. Typical values are in the range -1 to 1, exclusive.</p>
     *<pre>
     *       Min: n/a
     *       Max: n/a
     *   Default: 0.0
     *  Identity: 0.0
     *</pre>
    **/
 public var x :Double on replace{
        if(isInitialized(this)){
            wrappedShear.setX(x);
        }
    }

/**
     *<p>Defines the multiplier by which coordinates are shifted in the direction of the positive X axis as a factor of their Y coordinate. Typical values are in the range -1 to 1, exclusive.</p>
     *<pre>
     *       Min: n/a
     *       Max: n/a
     *   Default: 0.0
     *  Identity: 0.0
     *</pre>
    **/
 public var y :Double on replace{
        if(isInitialized(this)){
            wrappedShear.setY(y);
        }
    }



}