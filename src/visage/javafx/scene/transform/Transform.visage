/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.transform;

import visage.javafx.geometry.Point3D;

/** 
 * <p>This class provides functions to perform rotating, scaling, shearing, and translation transformations for <code>Affine<code>/ objects. </p>
 *
 * @author Alain BÃ©arez <A@cua.li>
 */
public abstract class Transform {
    public-read protected var wrappedTransform :javafx.scene.transform.Transform;
}

/** 
 * Returns a <code>Rotate</code> object that rotates coordinates around a pivot point along the Z axis.
 * @param angle
 *      the angle of rotation measured in degrees.
 * @param pivotX
 *      the X coordinate of the rotation pivot point.
 * @param pivotY
 *      the Y coordinate of the rotation pivot point.
 */
public function rotate(angle :Double, pivotX :Double, pivotY :Double) :Rotate {
    rotate(angle, pivotX, pivotY, 0, Rotate.Z_AXIS)
}
/**
 * Creates a three-dimensional Rotate transform with pivot.
 * @param angle
 *      the angle of rotation measured in degrees
 * @param pivotX
 *      the X coordinate of the rotation pivot point.
 * @param pivotY
 *      the Y coordinate of the rotation pivot point.
 * @param pivotZ
 *      the Z coordinate of the rotation pivot point.
 * @param axis
 *      the axis of rotation
 */
public function rotate(angle :Double, pivotX :Double, pivotY :Double, pivotZ :Double, axis :Point3D) :Rotate {
    Rotate { angle: angle, pivotX: pivotX, pivotY: pivotY, pivotZ: pivotZ, axis: axis } //FIXME should a Visage angle literal instead of "degrees in double"
}

/** 
 * Returns a <code>Scale</code> object representing a scaling transformation. 
 * @param x
 *      the factor by which coordinates are scaled along the X axis.
 * @param y
 *      the factor by which coordinates are scaled along the Y axis.
 * @param pivotX
 *      the X coordinate about which point the scale occurs.
 * @param pivotY
 *      the Y coordinate about which point the scale occurs.
 */
public function scale(x :Double, y :Double, pivotX :Double, pivotY :Double) :Scale {
    scale(x, y, 1, pivotX, pivotY, 0)
}

/** 
 * Returns a <code>Scale</code> object representing a scaling transformation. 
 * @param x
 *      the factor by which coordinates are scaled along the X axis.
 * @param y
 *      the factor by which coordinates are scaled along the Y axis.
 * @param z
 *      the factor by which coordinates are scaled along the Z axis.
 * @param pivotX
 *      the X coordinate about which point the scale occurs.
 * @param pivotY
 *      the Y coordinate about which point the scale occurs.
 * @param pivotZ
 *      the Z coordinate about which point the scale occurs.
 */
public function scale(x :Double, y :Double, z :Double, pivotX :Double, pivotY :Double, pivotZ :Double) :Scale {
    Scale { x: x, y: y, z: z, pivotX: pivotX, pivotY: pivotY, pivotZ: pivotZ }
}

/** 
 * <p>Returns a <code>Translate</code> object representing a 2D-translation transformation.</p>
 * @param  x
 *      the distance by which coordinates are translated in the X axis direction.
 * @param  y
 *      the distance by which coordinates are translated in the Y axis direction.
 */
public function translate(x :Double, y :Double) :Translate {
    translate(x, y, 0)
}

/** 
 * Returns a <code>Translate</code> object representing a 3D-translation transformation.
 * @param  x
 *      the distance by which coordinates are translated in the X axis direction.
 * @param  y
 *      the distance by which coordinates are translated in the Y axis direction.
 * @param  z
 *      the distance by which coordinates are translated in the Z axis direction.
 */
public function translate(x :Double, y :Double, z :Double) :Translate {
    Translate { x: x, y: y, z: z }
}
